
/*
	? ?? :	?? ??? ????? ?? ?? ?? ????. ?? ??  ?? ??.
				?? ??? ????? ????, ??? ??? ???? ?? ??? ? ???? ??
				??? ?? ??? ?? ????? ? ?? ?? ??? ????. 

				5	6	7	3	1	9	2	4	8
				^	^							^
				p	i							j

				- i? ?????? ???? ? data[i]? ??
				- ????? ???? ?? ??? j? ????
				- j? ?????? ???? ?? data[i]? ??
				- ?????? ???? ?? ?? ???? i? j? ???
				- ?? ??? ?? (???)
				- ????? ?? i? j?? ???? (i>j)? ?? ??? data[j]? ???


				1	4	2	3	5	9	7	6	8
								^
							<<	p  >>
				{???? ???}	{???? ???}
						

				1	4	2	3		5		9	7	6	8
				^					*		^
				p					p

				- ? ?? ?? ??? ?? ????? ??? ??


	
	**	???? ?????? ???? ????? 
		??????? ?????? ???? ???? ???

		????? : (??? ??) O(n log n) (?? ???? ???? ??)
					(??? ??) O(n2) (??? 1?, ???? n-1?? ???? ??)

		???? ?? ???.
		
		????? ?? ?? ?? ???? -> c/c++????? ?????? ??????
		std :: sort()
*/


//#define _CRT_SECURE_NO_WARNINGS
//#include <iostream>
//#include <algorithm>
//
//using namespace std;
//
//void QuickSort(int data[], int left, int right);
//int partition(int data[], int left, int right);
//
//int main()
//{
//	int arr[] = { 5,6,7,3,1,9,2,4,8 };
//
//	
//	QuickSort(arr, 0, size(arr) - 1);
//
//	for (auto n : arr)
//	{
//		cout << n << ", ";
//	}
//
//	
//}
//
//void QuickSort(int data[], int left, int right)
//{
//	if (left < right)
//	{
//		int p = partition(data, left, right); // ?????? ??? ???? ??? ???? ????? ??
//
//		QuickSort(data, left, p - 1);		// ?? ??? ??? ??
//		QuickSort(data, p + 1, right);		// ?? ??? ??? ??
//	}
//	// left? right? ??? ?? ??? ?????? ??? ???
//	// ?? ????? ??
//}
//
//int partition(int data[], int left, int right)
//{
//	int pivot = data[left];
//	int i = left + 1; //???? ??
//	int j = right;
//
//	while (true)
//	{
//		while (data[i] <= pivot && i <= right)
//			i++;
//		
//		while (data[j] > pivot && j > left)
//			j--;
//		
//		if (i < j)
//			swap(data[i], data[j]);
//		else
//			break;
//	}
//
//	swap(data[left], data[j]);
//
//	return j;
//}


